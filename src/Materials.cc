/*
 * Materials.cpp
 *
 *  Created on: Nov 16, 2020
 *      Author: petrstepanov
 */

#include <G4SystemOfUnits.hh>
#include <Elements.hh>
#include <G4ios.hh>
#include <G4MaterialPropertiesTable.hh>
#include <G4NistManager.hh>
#include <G4PhysicsVector.hh>
#include <G4String.hh>
#include <G4Types.hh>
#include <G4Utils.hh>
#include <Materials.hh>
#include <stdlib.h>
#include <TAttMarker.h>
#include <TString.h>
//#include <TVectorDfwd.h>
#include <TSystem.h>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <fstream>
#include <functional>
#include <iomanip>
#include <iostream>
#include <map>
#include <string>

#include <TSystem.h>
#include <TGraph.h>
#include <TVectorD.h>
#include <TFile.h>

Materials* Materials::fgInstance = nullptr;

Materials::Materials() : fMaterialsList{}
                         // fOpticalPhotonWavelength{400., 440., 480., 520., 560., 600., 640., 680.},
                         // fOpticalPhotonEnergy{}
                         // fCrystalLength(200*mm)
{
  // fMaterialsList.clear();
  // Instantiate elements database
  Elements* elements = Elements::getInstance();

  // VM2000
  G4Material* C10H8O4 = new G4Material("C10H8O4", 1.38*g/cm3, 3);
  C10H8O4->AddElement(elements->getElement("C"), 10);
  C10H8O4->AddElement(elements->getElement("H"), 8);
  C10H8O4->AddElement(elements->getElement("O"), 4);
  fMaterialsList.push_back(C10H8O4);

  // Aluminum
  G4Material* Aluminum = new G4Material("Aluminum", 2.70*g/cm3, 1);
  Aluminum->AddElement(elements->getElement("Al"), 1);
  fMaterialsList.push_back(Aluminum);

  // Frame
  // PS: why frame is made of carbon?
  G4Material* Frame = new G4Material("Frame", 1.55*g/cm3, 1);
  Frame->AddElement(elements->getElement("C"), 1);
  fMaterialsList.push_back(Frame);

  // Mu-metal
  // Wikipedia: composition is approximately 77% nickel, 16% iron, 5% copper, and 2% chromium or molybdenum
  // http://www.mu-metal.com/technical-data.html
  G4Material* MuMetal = new G4Material("MuMetal", 8.7 * g/cm3, 4);
  MuMetal->AddElement(elements->getElement("Ni"), 77 * perCent);
  MuMetal->AddElement(elements->getElement("Fe"), 16 * perCent);
  MuMetal->AddElement(elements->getElement("Cu"), 5 * perCent);
  MuMetal->AddElement(elements->getElement("Cr"), 2 * perCent);
  fMaterialsList.push_back(MuMetal);

  // ASCII font
  // https://fsymbols.com/generators/carty/

  // █░█ ▄▀█ █▀▀ █░█ █░█ █▀▄▀█
  // ▀▄▀ █▀█ █▄▄ █▄█ █▄█ █░▀░█

  // Vacuum how-to: http://hurel.hanyang.ac.kr/Geant4/Doxygen/10.03/html/d2/dd7/_d_m_x_detector_material_8icc_source.html
  {
    G4Material* material = new G4Material("vacuum", 1., 1.*g/mole, 1.e-20*g/cm3, kStateGas, 0.1*kelvin, 1.e-20*bar);
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();

    // Refractive Index of Vacuum
    std::vector<G4double> rIndex = {200, 1., 800, 1.};
    G4MaterialPropertyVector* rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV);

    // Absorption length of Vacuum
    std::vector<G4double> absLength  = {200, 1000*km, 800, 1000*km};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    // mpt->DumpTable();
    material->SetMaterialPropertiesTable(mpt);
    fMaterialsList.push_back(material);
    saveMaterial(material);
  }


  // ▄▀█ █ █▀█
  // █▀█ █ █▀▄

  G4Material* air = new G4Material("air", 1.205*mg/cm3, 2, kStateGas, 293*kelvin, 1*atmosphere);
  air->AddElement(elements->getElement("N"), 0.7);
  air->AddElement(elements->getElement("O"), 0.3);

  {
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();

    // Refractive Index of Air
    // https://refractiveindex.info/?shelf=other&book=air&page=Ciddor
    std::vector<G4double> rIndex = { 400, 1.00028276, 440, 1.00028091, 480, 1.00027954, 520, 1.00027848, 560, 1.00027765, 600, 1.00027698, 640, 1.00027644, 680, 1.00027600};
    G4MaterialPropertyVector* rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV);

    // Absorption length of Air
    // https://web.physik.rwth-aachen.de/~hebbeker/theses/dietz-laursonn_phd.pdf
    std::vector<G4double> absLength  = {400, 50*m, 680, 50*m};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    // mpt->DumpTable();
    air->SetMaterialPropertiesTable(mpt);
  }
  fMaterialsList.push_back(air);
  saveMaterial(air);

  // ▀█▀ █▀▀ █▀▀ █░░ █▀█ █▄░█
  // ░█░ ██▄ █▀░ █▄▄ █▄█ █░▀█

  G4Material* teflon = G4NistManager::Instance()->FindOrBuildMaterial("G4_TEFLON");
  {
    G4MaterialPropertiesTable *mpt = new G4MaterialPropertiesTable();
    // Refrafctive index taken from this paper for AF1601
    // https://engineering.case.edu/centers/sdle/sites/engineering.case.edu.centers.sdle/files/optical_properties_of_teflon_r_af_amorphous_fluo.pdf
    std::vector<G4double> rIndex = { 145.861, 1.399, 149.377, 1.427, 153.114, 1.430, 156.996, 1.417, 161.099, 1.399, 165.348, 1.388, 179.780, 1.364, 180.162, 1.344, 203.017, 1.328, 232.905, 1.318, 264.551, 1.312, 301.471, 1.308, 354.214, 1.305, 459.701, 1.301, 653.092, 1.297, 955.486, 1.295, 1379.190, 1.292, 1549.726, 1.292 };
    G4MaterialPropertyVector *rIndexMPV = nmToMPV(rIndex);
    mpt->AddProperty("RINDEX", rIndexMPV);

    std::vector<G4double> absLength = {157.902, 1/4513.216*cm, 159.285, 1/3295.154*cm, 161.524, 1/2200.441*cm, 164.224, 1/1321.586*cm, 168.636, 1/674.009*cm, 174.167, 1/303.965*cm, 181.477, 1/165.198*cm, 187.404, 1/134.361*cm, 195.108, 1/72.687*cm, 206.105, 1/41.850*cm, 220, 1/1*cm};
    G4MaterialPropertyVector* absLengthMPV = nmToMPV(absLength);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    // TODO: add emission p. 321
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    teflon->SetMaterialPropertiesTable(mpt);
  }
  fMaterialsList.push_back(teflon);
  saveMaterial(teflon);

  // █▄▄ █▀▀ ▄▄ █▄▄ ▀▀█ █▀█
  // █▄█ █▄▄ ░░ █▄█ ▄██ █▄█

  // Composition: https://www.crystals.saint-gobain.com/sites/imdf.crystals.com/files/documents/bc-630.pdf
  G4Material* bc630 = new G4Material("BC630", 1.04*g/cm3, 4, kStateLiquid);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("C"), 2);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("H"), 6);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 1);
  bc630->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);

  G4MaterialPropertiesTable* bc630MPT = new G4MaterialPropertiesTable();

  // Found nice article here: https://sci-hub.do/10.3390/s20216092
  std::vector<G4double> refractiveIndexBC630 = {350, 1.465,
  																							650, 1.465};
  G4MaterialPropertyVector* refractiveIndexBC630MPV = nmToMPV(refractiveIndexBC630);
  bc630MPT->AddProperty("RINDEX", refractiveIndexBC630MPV);

  std::vector<G4double> absorptionLengthBC630 = {350, 1/0.004*cm,
  																							 400, 1/0.002*cm,
  																							 450, 1/0.001*cm,
  																							 650, 1/0.0005*cm};
  G4MaterialPropertyVector* absorptionLengthBC630MPV = nmToMPV(absorptionLengthBC630);
  bc630MPT->AddProperty("ABSLENGTH", absorptionLengthBC630MPV);
  // bc630MPT->DumpTable();
  bc630->SetMaterialPropertiesTable(bc630MPT);

  fMaterialsList.push_back(bc630);

  // █▀█ █▀▄ █▀▄▀█ █▀   █▀▀ █▀█ █▀▀ ▄▀█ █▀ █▀▀
  // █▀▀ █▄▀ █░▀░█ ▄█   █▄█ █▀▄ ██▄ █▀█ ▄█ ██▄

  // Some documentation on the polydimethylsiloxane grease: https://arxiv.org/pdf/1305.3010.pdf
  G4Material* grease = new G4Material("PDMS", 0.97*g/cm3, 4, kStateLiquid);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("C"), 2);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("H"), 6);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 1);
  grease->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);

  // Data digitized from: https://sci-hub.do/https://doi.org/10.1116/1.5046735
  // Array taken from here: https://refractiveindex.info/?shelf=organic&book=polydimethylsiloxane&page=Gupta
  // Simply export n(eV) to CSV and copy here
  std::vector<G4double> refractiveIndexGrease = {0.7336342451662705,1.403767,0.734721110714665,1.40377,0.7358112013833811,1.403773,0.7369045315488838,1.403775,0.7380011156732126,1.403778,0.7391009683046182,1.403781,0.7402041040782072,1.403783,0.7413105377165902,1.403786,0.7424202840305373,1.403789,0.7435333579196385,1.403792,0.7446497743729712,1.403795,0.7457695484697726,1.403797,0.7468926953801188,1.4038,0.7480192303656091,1.403803,0.7491491687800587,1.403806,0.7502825260701949,1.403809,0.751419317776362,1.403811,0.7525595595332304,1.403814,0.7537032670705149,1.403817,0.7548504562136968,1.40382,0.7560011428847544,1.403823,0.757155343102899,1.403826,0.7583130729853194,1.403829,0.7594743487479308,1.403832,0.7606391867061333,1.403835,0.7618076032755743,1.403838,0.7629796149729213,1.403841,0.7641552384166392,1.403844,0.765334490327776,1.403847,0.7665173875307556,1.40385,0.7677039469541778,1.403853,0.7688941856316261,1.403856,0.7700881207024827,1.403859,0.771285769412751,1.403862,0.7724871491158861,1.403865,0.7736922772736331,1.403868,0.7749011714568732,1.403871,0.7761138493464771,1.403875,0.7773303287341675,1.403878,0.7785506275233891,1.403881,0.7797747637301868,1.403884,0.7810027554840927,1.403887,0.7822346210290203,1.403891,0.7834703787241688,1.403894,0.7847100470449349,1.403897,0.7859536445838334,1.4039,0.7872011900514267,1.403904,0.7884527022772637,1.403907,0.7897082002108262,1.40391,0.7909677029224863,1.403914,0.792231229604471,1.403917,0.7934987995718381,1.40392,0.7947704322634597,1.403924,0.7960461472430158,1.403927,0.7973259641999982,1.403931,0.7986099029507228,1.403934,0.7998979834393529,1.403938,0.8011902257389318,1.403941,0.8024866500524254,1.403944,0.8037872767137745,1.403948,0.8050921261889592,1.403952,0.8064012190770713,1.403955,0.8077145761113989,1.403959,0.8090322181605202,1.403962,0.8103541662294099,1.403966,0.8116804414605545,1.40397,0.8130110651350801,1.403973,0.8143460586738898,1.403977,0.8156854436388139,1.40398,0.8170292417337707,1.403984,0.8183774748059387,1.403988,0.8197301648469403,1.403992,0.8210873339940379,1.403995,0.8224490045313414,1.403999,0.823815198891028,1.404003,0.8251859396545739,1.404007,0.8265612495539981,1.404011,0.82794115147312,1.404014,0.8293256684488275,1.404018,0.8307148236723599,1.404022,0.8321086404906021,1.404026,0.833507142407393,1.40403,0.8349103530848465,1.404034,0.8363182963446861,1.404038,0.8377309961695927,1.404042,0.8391484767045666,1.404046,0.8405707622583031,1.40405,0.8419978773045821,1.404054,0.8434298464836716,1.404058,0.8448666946037459,1.404062,0.8463084466423189,1.404067,0.8477551277476904,1.404071,0.849206763240409,1.404075,0.8506633786147493,1.404079,0.8521249995402042,1.404083,0.8535916518629929,1.404088,0.8550633616075842,1.404092,0.8565401549782363,1.404096,0.8580220583605516,1.4041,0.8595090983230483,1.404105,0.861001301618748,1.404109,0.8624986951867806,1.404114,0.8640013061540049,1.404118,0.8655091618366472,1.404122,0.867022289741956,1.404127,0.8685407175698754,1.404131,0.8700644732147348,1.404136,0.8715935847669575,1.40414,0.8731280805147867,1.404145,0.8746679889460297,1.404149,0.8762133387498213,1.404154,0.877764158818405,1.404159,0.8793204782489342,1.404163,0.8808823263452911,1.404168,0.8824497326199268,1.404173,0.8840227267957198,1.404178,0.8856013388078552,1.404182,0.8871855988057225,1.404187,0.8887755371548366,1.404192,0.890371184438777,1.404197,0.891972571461149,1.404202,0.8935797292475656,1.404207,0.8951926890476514,1.404211,0.8968114823370684,1.404216,0.8984361408195632,1.404221,0.900066696429036,1.404226,0.9017031813316343,1.404231,0.9033456279278668,1.404236,0.9049940688547423,1.404242,0.9066485369879321,1.404247,0.908309065443954,1.404252,0.9099756875823832,1.404257,0.9116484370080861,1.404262,0.9133273475734786,1.404268,0.9150124533808097,1.404273,0.916703788784471,1.404278,0.9184013883933312,1.404283,0.9201052870730962,1.404289,0.9218155199486968,1.404294,0.9235321224067018,1.4043,0.925255130097759,1.404305,0.9269845789390634,1.404311,0.9287205051168518,1.404316,0.9304629450889285,1.404322,0.9322119355872158,1.404327,0.9339675136203369,1.404333,0.9357297164762243,1.404339,0.9374985817247615,1.404344,0.9392741472204523,1.40435,0.9410564511051213,1.404356,0.9428455318106442,1.404362,0.9446414280617121,1.404367,0.9464441788786238,1.404373,0.9482538235801125,1.404379,0.9500704017862047,1.404385,0.951893953421111,1.404391,0.9537245187161516,1.404397,0.9555621382127145,1.404403,0.9574068527652488,1.404409,0.9592587035442918,1.404415,0.9611177320395327,1.404422,0.9629839800629103,1.404428,0.9648574897517488,1.404434,0.9667383035719276,1.40444,0.9686264643210915,1.404447,0.970522015131896,1.404453,0.9724249994752919,1.404459,0.9743354611638485,1.404466,0.9762534443551159,1.404472,0.9781789935550272,1.404479,0.9801121536213416,1.404485,0.9820529697671265,1.404492,0.9840014875642834,1.404499,0.985957752947115,1.404505,0.987921812215934,1.404512,0.9898937120407163,1.404519,0.9918734994647977,1.404526,0.9938612219086149,1.404532,0.9958569271734916,1.404539,0.9978606634454705,1.404546,0.9998724792991912,1.404553,1.0018924237018159,1.40456,1.0039205460170015,1.404567,1.0059568960089227,1.404575,1.0080015238463391,1.404582,1.0100544801067186,1.404589,1.0121158157804058,1.404596,1.0141855822748442,1.404603,1.0162638314188501,1.404611,1.0183506154669382,1.404618,1.0204459871037013,1.404626,1.0225499994482452,1.404633,1.0246627060586753,1.404641,1.0267841609366435,1.404648,1.0289144185319479,1.404656,1.031053533747191,1.404664,1.0332015619424977,1.404672,1.0353585589402898,1.404679,1.037524581030123,1.404687,1.0396996849735827,1.404695,1.0418839280092413,1.404703,1.0440773678576818,1.404711,1.0462800627265798,1.404719,1.0484920713158536,1.404727,1.050713452822879,1.404735,1.0529442669477682,1.404744,1.055184573898721,1.404752,1.057434434397439,1.40476,1.059693909684613,1.404769,1.0619630615254794,1.404777,1.064241952215448,1.404786,1.0665306445858038,1.404794,1.0688292020094803,1.404803,1.071137688406909,1.404812,1.0734561682519455,1.40482,1.0757847065778716,1.404829,1.078123368983476,1.404838,1.0804722216392133,1.404847,1.0828313312934472,1.404856,1.085200765278772,1.404865,1.0875805915184187,1.404874,1.0899708785327449,1.404884,1.0923716954458125,1.404893,1.0947831119920504,1.404902,1.0972051985230065,1.404912,1.0996380260141883,1.404921,1.1020816660719974,1.40493,1.1045361909407547,1.40494,1.1070016735098187,1.40495,1.1094781873208028,1.40496,1.1119658065748854,1.404969,1.1144646061402221,1.404979,1.1169746615594567,1.404989,1.1194960490573338,1.404999,1.1220288455484138,1.405009,1.1245731286448952,1.405019,1.1271289766645427,1.40503,1.1296964686387219,1.40504,1.1322756843205453,1.40505,1.1348667041931324,1.405061,1.137469609477979,1.405071,1.1400844821434457,1.405082,1.1427114049133615,1.405093,1.145350461275748,1.405104,1.1480017354916638,1.405114,1.1506653126041737,1.405125,1.1533412784474393,1.405136,1.1560297196559415,1.405148,1.1587307236738291,1.405159,1.1614443787644002,1.40517,1.1641707740197156,1.405181,1.1669099993703502,1.405193,1.1696621455952803,1.405204,1.172427304331912,1.405216,1.1752055680862532,1.405228,1.1779970302432277,1.40524,1.1808017850771402,1.405252,1.1836199277622883,1.405264,1.1864515543837293,1.405276,1.1892967619481987,1.405288,1.1921556483951896,1.4053,1.19502831260819,1.405312,1.1979148544260843,1.405325,1.2008153746547188,1.405337,1.2037299750786379,1.40535,1.2066587584729898,1.405363,1.2096018286156072,1.405376,1.2125592902992637,1.405389,1.2155312493441148,1.405402,1.2185178126103164,1.405415,1.2215190880108346,1.405428,1.2245351845244417,1.405442,1.227566212208908,1.405455,1.2306122822143892,1.405469,1.2336735067970122,1.405483,1.2367499993326656,1.405496,1.2398418743309971,1.40551,1.2410829572882853,1.405516,1.2423265273857687,1.405522,1.243572592107319,1.405527,1.2448211589668645,1.405533,1.2460722355085398,1.405539,1.247325829306838,1.405544,1.2485819479667646,1.40555,1.2498405991239891,1.405556,1.2511017904450021,1.405562,1.2523655296272698,1.405567,1.2536318243993905,1.405573,1.254900682521252,1.405579,1.2561721117841915,1.405585,1.2574461200111533,1.405591,1.2587227150568499,1.405596,1.2600019048079238,1.405602,1.26128369718311,1.405608,1.2625681001333984,1.405614,1.263855121642199,1.40562,1.2651447697255074,1.405626,1.2664370524320707,1.405632,1.2677319778435554,1.405638,1.2690295540747156,1.405644,1.2703297892735628,1.40565,1.2716326916215355,1.405656,1.2729382693336726,1.405662,1.2742465306587842,1.405669,1.2755574838796266,1.405675,1.2768711373130763,1.405681,1.2781874993103064,1.405687,1.279506578256963,1.405693,1.2808283825733442,1.405699,1.2821529207145783,1.405706,1.2834802011708044,1.405712,1.2848102324673545,1.405718,1.286143023164935,1.405725,1.2874785818598102,1.405731,1.2888169171839887,1.405737,1.290158037805408,1.405744,1.2915019524281222,1.40575,1.2928486697924892,1.405756,1.2941981986753623,1.405763,1.2955505478902791,1.405769,1.296905726287654,1.405776,1.2982637427549708,1.405782,1.2996246062169783,1.405789,1.3009883256358836,1.405795,1.3023549100115517,1.405802,1.3037243683817006,1.405809,1.3050967098221022,1.405815,1.306471943446783,1.405822,1.307850078408225,1.405828,1.3092311238975682,1.405835,1.3106150891448174,1.405842,1.3120019834190446,1.405849,1.3133918160285987,1.405855,1.314784596321312,1.405862,1.3161803336847104,1.405869,1.3175790375462244,1.405876,1.3189807173734012,1.405883,1.3203853826741185,1.40589,1.3217930429967988,1.405896,1.3232037079306265,1.405903,1.324617387105766,1.40591,1.3260340901935797,1.405917,1.3274538269068492,1.405924,1.3288766069999969,1.405931,1.3303024402693102,1.405938,1.3317313365531656,1.405945,1.333163305732255,1.405952,1.334598357729814,1.40596,1.3360365025118504,1.405967,1.3374777500873756,1.405974,1.3389221105086362,1.405981,1.3403695938713482,1.405988,1.341820210314932,1.405995,1.3432739700227487,1.406003,1.3447308832223395,1.40601,1.3461909601856645,1.406017,1.3476542112293446,1.406025,1.3491206467149044,1.406032,1.3505902770490164,1.40604,1.3520631126837481,1.406047,1.353539164116809,1.406054,1.3550184418918,1.406062,1.3565009565984651,1.40607,1.357986718872943,1.406077,1.359475739398023,1.406085,1.3609680289033996,1.406092,1.3624635981659308,1.4061,1.3639624580098977,1.406107,1.3654646193072655,1.406115,1.366970092977946,1.406123,1.368478889990063,1.406131,1.3699910213602178,1.406138,1.371506498153758,1.406146,1.3730253314850467,1.406154,1.3745475325177352,1.406162,1.3760731124650356,1.40617,1.3776020825899968,1.406178,1.379134454205781,1.406186,1.3806702386759433,1.406193,1.3822094474147124,1.406201,1.3837520918872737,1.406209,1.3852981836100526,1.406218,1.3868477341510035,1.406226,1.388400755129896,1.406234,1.3899572582186066,1.406242,1.391517255141411,1.40625,1.3930807576752777,1.406258,1.3946477776501656,1.406267,1.3962183269493211,1.406275,1.3977924175095797,1.406283,1.399370061321667,1.406291,1.4009512704305052,1.4063,1.4025360569355172,1.406308,1.4041244329909368,1.406317,1.405716410806119,1.406325,1.4073120026458537,1.406334,1.4089112208306787,1.406342,1.410514077737198,1.406351,1.4121205857984023,1.406359,1.4137307575039877,1.406368,1.4153446054006817,1.406376,1.4169621420925682,1.406385,1.4185833802414154,1.406394,1.420208332567007,1.406403,1.4218370118474737,1.406411,1.4234694309196294,1.40642,1.425105602679307,1.406429,1.4267455400816997,1.406438,1.4283892561417018,1.406447,1.4300367639342528,1.406456,1.4316880765946849,1.406465,1.433343207319072,1.406474,1.43500216936458,1.406483,1.436664976049823,1.406492,1.4383316407552171,1.406501,1.4400021769233415,1.40651,1.441676598059299,1.406519,1.4433549177310794,1.406529,1.4450371495699268,1.406538,1.4467233072707084,1.406547,1.4484134045922863,1.406557,1.4501074553578914,1.406566,1.4518054734555002,1.406575,1.4535074728382147,1.406585,1.4552134675246446,1.406594,1.4569234715992916,1.406604,1.4586374992129378,1.406613,1.4603555645830355,1.406623,1.4620776819941004,1.406633,1.4638038657981076,1.406642,1.4655341304148903,1.406652,1.467268490332541,1.406662,1.4690069601078166,1.406672,1.4707495543665448,1.406681,1.4724962878040346,1.406691,1.4742471751854902,1.406701,1.4760022313464252,1.406711,1.4777614711930835,1.406721,1.4795249097028607,1.406731,1.481292561924728,1.406741,1.4830644429796618,1.406751,1.4848405680610746,1.406762,1.4866209524352485,1.406772,1.4884056114417734,1.406782,1.490194560493987,1.406792,1.491987815079419,1.406803,1.4937853907602376,1.406813,1.4955873031737,1.406823,1.4973935680326054,1.406834,1.4992042011257523,1.406844,1.5010192183183986,1.406855,1.502838635552724,1.406865,1.5046624688482975,1.406876,1.5064907343025482,1.406887,1.5083234480912375,1.406897,1.510160626468937,1.406908,1.5120022857695088,1.406919,1.51384844240659,1.40693,1.5156991128740798,1.40694,1.5175543137466305,1.406951,1.5194140616801437,1.406962,1.5212783734122666,1.406973,1.523147265762896,1.406984,1.5250207556346829,1.406996,1.5268988600135431,1.407007,1.5287815959691702,1.407018,1.530668980655552,1.407029,1.5325610313114921,1.40704,1.5344577652611349,1.407052,1.5363591999144945,1.407063,1.5382653527679864,1.407075,1.5401762414049653,1.407086,1.542091883496265,1.407098,1.5440122968007435,1.407109,1.5459374991658317,1.407121,1.5478675085280862,1.407133,1.5498023429137464,1.407144,1.5517420204392955,1.407156,1.5536865593120264,1.407168,1.555635977830611,1.40718,1.5575902943856748,1.407192,1.5595495274603737,1.407204,1.5615136956309787,1.407216,1.5634828175674615,1.407228,1.565456912034087,1.40724,1.567435997890009,1.407252,1.5694200940898697,1.407264,1.571409219684407,1.407277,1.5734033938210623,1.407289,1.575402635744596,1.407301,1.5774069647977063,1.407314,1.5794164004216524,1.407326,1.581430962156884,1.407339,1.5834506696436745,1.407351,1.5854755426227585,1.407364,1.5875056009359758,1.407377,1.5895408645269193,1.40739,1.5915813534415881,1.407402,1.593627087829045,1.407415,1.595678087942081,1.407428,1.5977343741378829,1.407441,1.5997959668787058,1.407454,1.6018628867325544,1.407467,1.6039351543738642,1.407481,1.6060127905841932,1.407494,1.6080958162529144,1.407507,1.6101842523779184,1.40752,1.612278120066316,1.407534,1.6143774405351525,1.407547,1.6164822351121213,1.407561,1.6185925252362887,1.407574,1.6207083324588198,1.407588,1.6228296784437135,1.407602,1.6249565849685415,1.407616,1.627089073925193,1.407629,1.629227167320627,1.407643,1.6313708872776278,1.407657,1.6335202560355693,1.407671,1.6356752959511835,1.407685,1.6378360294993357,1.407699,1.6400024792738057,1.407714,1.6421746679880758,1.407728,1.6443526184761235,1.407742,1.6465363536932234,1.407757,1.6487258967167515,1.407771,1.6509212707470002,1.407786,1.6531224991079962,1.4078,1.6553296052483273,1.407815,1.6575426127419748,1.40783,1.6597615452891528,1.407844,1.6619864267171542,1.407859,1.6642172809812041,1.407874,1.6664541321653188,1.407889,1.6686970044831724,1.407904,1.670945922278972,1.40792,1.6732009100283363,1.407935,1.6754619923391854,1.40795,1.6777291939526349,1.407965,1.6800025397438987,1.407981,1.6822820547231983,1.407996,1.684567764036681,1.408012,1.6868596929673432,1.408028,1.6891578669359635,1.408043,1.6914623115020424,1.408059,1.6937730523647503,1.408075,1.6960901153638812,1.408091,1.698413526480818,1.408107,1.7007433118395023,1.408123,1.7030794977074137,1.408139,1.7054221104965572,1.408155,1.707771176764459,1.408172,1.7101267232151685,1.408188,1.7124887767002723,1.408205,1.7148573642199132,1.408221,1.7172325129238188,1.408238,1.7196142501123401,1.408255,1.722002603237496,1.408271,1.7243975999040295,1.408288,1.7267992678704696,1.408305,1.7292076350502052,1.408322,1.731622729512566,1.408339,1.734044579483912,1.408357,1.7364732133487355,1.408374,1.7389086596507675,1.408391,1.741350947094097,1.408409,1.7438001045443,1.408426,1.7462561610295735,1.408444,1.748719145741886,1.408462,1.7511890880381316,1.408479,1.7536660174412972,1.408497,1.7561499636416391,1.408515,1.7586409564978684,1.408533,1.7611390260383484,1.408551,1.7636442024623005,1.40857,1.7661565161410218,1.408588,1.7686759976191115,1.408606,1.7712026776157104,1.408625,1.773736587025747,1.408643,1.7762777569211994,1.408662,1.7788262185523633,1.408681,1.7813820033491339,1.4087,1.783945142922298,1.408719,1.7865156690648374,1.408738,1.7890936137532427,1.408757,1.79167900914884,1.408776,1.7942718875991277,1.408796,1.7968722816391265,1.408815,1.799480223992739,1.408835,1.802095747574124,1.408854,1.8047188854890786,1.408874,1.8073496710364387,1.408894,1.8099881377094846,1.408914,1.8126343191973642,1.408934,1.8152882493865257,1.408954,1.8179499623621658,1.408975,1.8206194924096872,1.408995,1.8232968740161721,1.409015,1.825982141871866,1.409036,1.828675330871677,1.409057,1.8313764761166869,1.409078,1.8340856129156762,1.409098,1.8368027767866624,1.409119,1.8395280034584527,1.409141,1.8422613288722096,1.409162,1.8450027891830314,1.409183,1.8477524207615454,1.409205,1.850510260195518,1.409226,1.8532763442914755,1.409248,1.8560507100763428,1.40927,1.858833394799096,1.409292,1.861624435932428,1.409314,1.8644238711744316,1.409336,1.8672317384502968,1.409358,1.8700480759140228,1.40938,1.8728729219501465,1.409403,1.8757063151754871,1.409425,1.8785482944409047,1.409448,1.8813988988330759,1.409471,1.8842581676762873,1.409494,1.887126140534242,1.409517,1.8900028572118859,1.40954,1.8928883577572475,1.409564,1.8957826824632984,1.409587,1.8986858718698272,1.409611,1.9015979667653329,1.409635,1.9045190081889356,1.409658,1.9074490374323032,1.409682,1.910388096041598,1.409706,1.91333622581944,1.409731,1.916293468826889,1.409755,1.9192598673854444,1.40978,1.9222354640790653,1.409804,1.9252203017562066,1.409829,1.9282144235318772,1.409854,1.9312178727897151,1.409879,1.934230693184083,1.409904,1.937252928642183,1.40993,1.9402846233661926,1.409955,1.9433258218354186,1.409981,1.9463765688084727,1.410007,1.949436909325467,1.410032,1.9525068887102317,1.410058,1.9555865525725507,1.410085,1.958675946810422,1.410111,1.9617751176123372,1.410138,1.9648841114595834,1.410164,1.9680029751285668,1.410191,1.9711317556931591,1.410218,1.9742705005270655,1.410245,1.9774192573062155,1.410272,1.9805780740111776,1.4103,1.9837469989295955,1.410327,1.9869260806586493,1.410355,1.9901153681075396,1.410383,1.9933149104999954,1.410411,1.996524757376807,1.410439,1.9997449585983824,1.410467,2.00297556434733,1.410496,2.006216625131063,1.410525,2.0094681917844364,1.410553,2.012730315472398,1.410582,2.0160030476926782,1.410612,2.019286440278497,1.410641,2.0225805454013006,1.410671,2.0258854155735246,1.4107,2.0292011036513866,1.41073,2.0325276628377003,1.41076,2.035865146684724,1.41079,2.0392136090970348,1.410821,2.042573104334427,1.410851,2.0459436870148466,1.410882,2.0493254121173505,1.410913,2.052718334985095,1.410944,2.0561225113283537,1.410976,2.05953799722757,1.411007,2.0629648491364345,1.411039,2.0664031238849954,1.411071,2.0698528786828,1.411103,2.073314171122069,1.411135,2.0767870591808997,1.411168,2.0802716012265052,1.4112,2.0837678560184827,1.411233,2.0872758827121163,1.411266,2.0907957408617155,1.411299,2.0943274904239817,1.411333,2.0978711917614166,1.411366,2.101426905645758,1.4114,2.1049946932614554,1.411434,2.1085746162091787,1.411469,2.112166736509365,1.411503,2.115771116605797,1.411538,2.119387819369226,1.411573,2.1230169081010226,1.411608,2.1266584465368736,1.411643,2.1303124988505107,1.411679,2.133979129657482,1.411715,2.1376584040189606,1.411751,2.1413503874455913,1.411787,2.145055145901379,1.411824,2.1487727458076207,1.41186,2.15250325404687,1.411897,2.156246737966952,1.411934,2.1600032653850127,1.411972,2.1637729045916183,1.412009,2.1675557243548904,1.412047,2.1713517939246887,1.412085,2.1751611830368374,1.412124,2.1789839619173943,1.412162,2.182820201286967,1.412201,2.1866699723650744,1.41224,2.1905333468745534,1.41228,2.194410397046013,1.412319,2.1983011956223355,1.412359,2.202205815863228,1.412399,2.206124331549817,1.41244,2.2100568169892996,1.41248,2.2140033470196374,1.412521,2.217963997014306,1.412562,2.2219388428870914,1.412604,2.2259279610969425,1.412646,2.2299314286528724,1.412688,2.2339493231189134,1.41273,2.237981722619128,1.412772,2.242028705842671,1.412815,2.2460903520489075,1.412858,2.25016674107259,1.412902,2.2542579533290854,1.412946,2.2583640698196668,1.41299,2.2624851721368557,1.413034,2.26662134246983,1.413078,2.270772663609885,1.413123,2.274939218955958,1.413169,2.279121092520215,1.413214,2.283318368933696,1.41326,2.287531133452024,1.413306,2.2917594719611776,1.413352,2.2960034709833277,1.413399,2.3002632176827404,1.413446,2.3045387998717417,1.413494,2.308830306016754,1.413541,2.3131378252443975,1.413589,2.3174614473476582,1.413638,2.321801262792129,1.413686,2.326157362722321,1.413736,2.33052983896804,1.413785,2.334918784050842,1.413835,2.3393242911905605,1.413885,2.3437464543119035,1.413935,2.348185368051131,1.413986,2.3526411277628028,1.414037,2.3571138295266105,1.414089,2.3616035701542804,1.41414,2.3661104471965593,1.414193,2.370634558950281,1.414245,2.3751760044655117,1.414298,2.3797348835527776,1.414352,2.3843112967903792,1.414405,2.388905345531786,1.414459,2.393517131913122,1.414514,2.3981467588607295,1.414569,2.4027943300988315,1.414624,2.4074599501572758,1.41468,2.412143724379372,1.414736,2.416845758929819,1.414793,2.421566160802729,1.41485,2.42630503782974,1.414907,2.4310624986882297,1.414965,2.435838652909621,1.415023,2.4406336108877897,1.415081,2.4454474838875684,1.415141,2.450280384053354,1.4152,2.455132424417816,1.41526,2.4600037189107087,1.41532,2.4648943823677874,1.415381,2.469804530539835,1.415442,2.474734280101791,1.415504,2.4796837486619943,1.415566,2.4846530547715373,1.415629,2.489642317933729,1.415692,2.494651658613676,1.415756,2.4996811982479783,1.41582,2.5047310592545395,1.415884,2.509801365042504,1.41595,2.5148922400223066,1.416015,2.5200038096158477,1.416081,2.5251362002667967,1.416148,2.5302895394510148,1.416215,2.535463955687111,1.416283,2.5406595785471255,1.416351,2.545876538667345,1.41642,2.5511149677592533,1.416489,2.556374998620613,1.416558,2.5616567651466884,1.416629,2.566960402341609,1.4167,2.57228604632987,1.416771,2.5776338343679774,1.416843,2.5830039048562443,1.416916,2.5883963973507247,1.416989,2.593811452575308,1.417062,2.5992492124339566,1.417137,2.6047098200231034,1.417212,2.6101934196442045,1.417287,2.61570015681645,1.417363,2.621230178289635,1.41744,2.6267836320571973,1.417517,2.632360667369421,1.417595,2.6379614347468023,1.417674,2.6435860859935976,1.417753,2.649234774211532,1.417833,2.6549076538136984,1.417913,2.6606048805386204,1.417994,2.66632661146451,1.418076,2.6720730050237007,1.418159,2.6778442210172724,1.418242,2.683640420629864,1.418326,2.689461766444679,1.418411,2.695308422458689,1.418496,2.7011805540980327,1.418582,2.707078328233618,1.418669,2.7130019131969303,1.418756,2.718951478796046,1.418844,2.7249271963318615,1.418933,2.730929238614531,1.419023,2.736957779980126,1.419114,2.743012996307516,1.419205,2.7490950650354704,1.419297,2.7552041651799937,1.41939,2.7613404773518866,1.419483,2.7675041837745473,1.419578,2.773695468302007,1.419673,2.779914516437213,1.419769,2.7861615153505555,1.419866,2.7924366538986423,1.419964,2.798740122643334,1.420062,2.8050721138710344,1.420162,2.811432821612238,1.420262,2.8178224416613573,1.420363,2.8242411715968045,1.420465,2.8306892108013635,1.420568,2.837166760482831,1.420672,2.8436740236949474,1.420777,2.850211205358614,1.420883,2.8567785122834035,1.42099,2.8633761531893698,1.421097,2.87000433872916,1.421206,2.8766632815104343,1.421316,2.883353196118598,1.421426,2.8900742991398536,1.421538,2.8968268091845726,1.421651,2.9036109469110003,1.421764,2.9104269350492893,1.421879,2.9172749984258757,1.421995,2.9241553639882008,1.422112,2.9310682608297807,1.42223,2.9380139202156332,1.422349,2.9449925756080693,1.422469,2.9520044626928503,1.422591,2.9590498194057213,1.422713,2.9661288859593236,1.422837,2.973241904870497,1.422961,2.980389120987974,1.423087,2.9875707815204753,1.423215,2.9947871360652107,1.423343,3.002038436636797,1.423473,3.009324937696595,1.423603,3.016646896182475,1.423735,3.0240045715390176,1.423869,3.0313982257481595,1.424003,3.0388281233602874,1.424139,3.046294531525792,1.424277,3.0537977200270863,1.424415,3.061337961311104,1.424555,3.0689155305222697,1.424697,3.0765307055359727,1.424839,3.08418376699253,1.424984,3.0918749983316633,1.425129,3.099604685827493,1.425276,3.1073731186240527,1.425425,3.1151805887713495,1.425575,3.1230273912619575,1.425726,3.130913824068174,1.425879,3.1388401881797394,1.426034,3.1468067876421246,1.42619,3.1548139295954125,1.426348,3.162861924313768,1.426507,3.170951085245517,1.426668,3.1790817290538387,1.426831,3.18725417565809,1.426995,3.1954687482757658,1.427161,3.203725773465109,1.427328,3.2120255811683864,1.427498,3.220368504755837,1.427669,3.228754881070305,1.427842,3.2371850504725774,1.428017,3.245659356887427,1.428194,3.254178147850386,1.428372,3.2627417745552556,1.428553,3.271350591902367,1.428735,3.2800049585476114,1.428919,3.288705236952247,1.429105,3.297451793433503,1.429294,3.3062449982159925,1.429484,3.3150852254839496,1.429676,3.3239728534343085,1.429871,3.3329082643306376,1.430067,3.341891844557944,1.430266,3.3509239846783707,1.430467,3.3600050794877974,1.43067,3.369135528073362,1.430875,3.378315733871927,1.431083,3.3875461047295006,1.431293,3.396827052961636,1.431505,3.4061589954148275,1.43172,3.415542353528918,1.431937,3.4249775534005447,1.432156,3.4344650258476377,1.432378,3.444005206474992,1.432603,3.453598535740939,1.43283,3.463245459025132,1.433059,3.472946426697471,1.433292,3.482701894188194,1.433527,3.492512322059147,1.433764,3.502378176076263,1.434005,3.5122999272832782,1.434248,3.5222780520766968,1.434494,3.5323130322820435,1.434743,3.5424053552314207,1.434995,3.5525555138423988,1.43525,3.5627640066982678,1.435507,3.5730313381296748,1.435768,3.58335801829768,1.436032,3.593744563278253,1.436299,3.604191495148248,1.43657,3.6146993420728775,1.436844,3.6252686383947283,1.43712,3.6358999247243315,1.437401,3.6465937480323443,1.437684,3.657350661743354,1.437972,3.6681712258313524,1.438262,3.6790560069169054,1.438557,3.690005578366063,1.438855,3.701020520391036,1.439156,3.7121014201526856,1.439462,3.723248871864856,1.439771,3.7344634769005935,1.440084,3.745745843900293,1.440401,3.7570965888818093,1.440722,3.7685163353525746,1.441047,3.7800057144237718,1.441376,3.791565364926597,1.44171,3.8031959335306658,1.442047,3.8148980748646064,1.44239,3.82667245163888,1.442736,3.838519734770889,1.443087,3.8504406035124132,1.443443,3.8624357455794303,1.443803,3.874505857284366,1.444168,3.886651643670837,1.444538,3.898873818650934,1.444912,3.9111731051451013,1.445292,3.9235502352246745,1.445677,3.9360059502571336,1.446066,3.948541001054131,1.446462,3.961156148022355,1.446862,3.9738521613172986,1.447268,3.986629820999991,1.447679,3.999489917196765,1.448096,4.012433250262126,1.448519,4.025460630944796,1.448948,4.038572880556994,1.449382,4.051770831147049,1.449823,4.0650553256754005,1.450269,4.0784272181940695,1.450722,4.091887374029693,1.451181,4.10543666997019,1.451647,4.11907599445514,1.452119,4.132806247769991,1.452598};
  G4MaterialPropertyVector* refractiveIndexGreaseMPV = evToMPV(refractiveIndexGrease);

  // Absorption coefficient 0.15344 cm-1 => 6.517205422 cm
  // https://refractiveindex.info/?shelf=organic&book=polydimethylsiloxane&page=Querry-NIR
  std::vector<G4double> absorptionLengthGrease = {0.7336342451662705, 6.517*cm,
  																								4.132806247769991, 6.517*cm};
  G4MaterialPropertyVector* absorptionLengthGreaseMPV = evToMPV(absorptionLengthGrease);

  G4MaterialPropertiesTable* greaseMPT = new G4MaterialPropertiesTable();
  greaseMPT->AddProperty("RINDEX", refractiveIndexGreaseMPV);
  greaseMPT->AddProperty("ABSLENGTH", absorptionLengthGreaseMPV);
  // greaseMPT->DumpTable();
  grease->SetMaterialPropertiesTable(greaseMPT);

  fMaterialsList.push_back(grease);

  // █▄▄ █▀█ █▀█ █▀█ █▀ █ █░░ █ █▀▀ ▄▀█ ▀█▀ █▀▀   █▀▀ █░░ ▄▀█ █▀ █▀
  // █▄█ █▄█ █▀▄ █▄█ ▄█ █ █▄▄ █ █▄▄ █▀█ ░█░ ██▄   █▄█ █▄▄ █▀█ ▄█ ▄█

  // ~ 90% SiO2, 10% B2O3: https://en.wikipedia.org/wiki/Borosilicate_glass
  G4Material* SiO2 = G4NistManager::Instance()->FindOrBuildMaterial("G4_SILICON_DIOXIDE");
  G4Material* B2O3 = G4NistManager::Instance()->FindOrBuildMaterial("G4_BORON_OXIDE");
  G4Material* borosilicate = new G4Material("borosilicate", 2.23*g/cm3, 2, kStateSolid);
  borosilicate->AddMaterial(SiO2, 0.9);
  borosilicate->AddMaterial(B2O3, 0.1);

  // https://www.hamamatsu.com/resources/pdf/etd/PMT_handbook_v3aE.pdf
  // Borosilicate window with Bialkali photocathode work within 300-650 nm range, pp.35
  // https://www.hamamatsu.com/jp/en/product/optical-sensors/photodiodes/si-photodiodes/si-photodiode-faq/index.html
  // LXeDetectorConstruction: 1.49

  std::vector<G4double> refractiveIndexBorosilicate = {300, 1.49,
  																								     650, 1.49};
  G4MaterialPropertyVector* refractiveIndexBorosilicateMPV = nmToMPV(refractiveIndexBorosilicate);

  // https://refractiveindex.info/?shelf=glass&book=SUMITA-BK&page=K-BK7
  // alpha = 0.0034706 cm-1 => 1/0.0034706 = 288 cm
  // LXeDetectorConstruction: 420.*cm
  std::vector<G4double> absorptionLengthBorosilicate = {300, 420.*cm,
  																								     650, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthBorosilicateMPV = nmToMPV(absorptionLengthBorosilicate);

  G4MaterialPropertiesTable* borosilicateMPT = new G4MaterialPropertiesTable();
  borosilicateMPT->AddProperty("RINDEX", refractiveIndexBorosilicateMPV);
  borosilicateMPT->AddProperty("ABSLENGTH", absorptionLengthBorosilicateMPV);
  // borosilicateMPT->DumpTable();
  borosilicate->SetMaterialPropertiesTable(borosilicateMPT);

  fMaterialsList.push_back(borosilicate);

  // █▀▀ █░█ █▀ █▀▀ █▀▄   █▀█ █░█ ▄▀█ █▀█ ▀█▀ ▀█   █▀▀ █░░ ▄▀█ █▀ █▀
  // █▀░ █▄█ ▄█ ██▄ █▄▀   ▀▀█ █▄█ █▀█ █▀▄ ░█░ █▄   █▄█ █▄▄ █▀█ ▄█ ▄█

  // Density found here
  // https://en.wikipedia.org/wiki/Fused_quartz#Typical_properties_of_clear_fused_silica
  G4Material* fusedSilica = new G4Material("fused-silica", 2.203*g/cm3, 2, kStateSolid);
  fusedSilica->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  fusedSilica->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 2);

  // Refractive index
  // https://en.wikipedia.org/wiki/Fused_quartz#Typical_properties_of_clear_fused_silica
  std::vector<G4double> refractiveIndexSilica = {300, 1.4585, 650, 1.4585};
  G4MaterialPropertyVector* refractiveIndexSilicaMPV = nmToMPV(refractiveIndexSilica);

  // Absorption length - copied from borosilicate
  std::vector<G4double> absorptionLengthSilica = {300, 420.*cm, 650, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthSilicaMPV = nmToMPV(absorptionLengthSilica);

  G4MaterialPropertiesTable* silicaMPT = new G4MaterialPropertiesTable();
  silicaMPT->AddProperty("RINDEX", refractiveIndexSilicaMPV);
  silicaMPT->AddProperty("ABSLENGTH", absorptionLengthSilicaMPV);
  // silicaMPT->DumpTable();
  fusedSilica->SetMaterialPropertiesTable(silicaMPT);

  fMaterialsList.push_back(fusedSilica);

  // █▀ █ █░░ █ █▀▀ █▀█ █▄░█ █▀▀   █▀█ █▀▀ █▀ █ █▄░█
  // ▄█ █ █▄▄ █ █▄▄ █▄█ █░▀█ ██▄   █▀▄ ██▄ ▄█ █ █░▀█

  // For MPPC S13360-****CS window
  // https://en.wikipedia.org/wiki/Silicone_resin
  G4Material* siliconeResin = new G4Material("silicone-resin", 1.42*g/cm3, 2, kStateSolid);
  siliconeResin->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  siliconeResin->AddElement(G4NistManager::Instance()->FindOrBuildElement("O"), 4);

  // Refractive index - found in Hamamatsu docs
  // https://www.hamamatsu.com/resources/pdf/ssd/s13360_series_kapd1052e.pdf
  // https://www.hamamatsu.com/us/en/product/optical-sensors/photodiodes/si-photodiodes/si-photodiode-faq/index.html
  std::vector<G4double> refractiveIndexResin = {300, 1.41, 650, 1.41};
  G4MaterialPropertyVector* refractiveIndexResinMPV = nmToMPV(refractiveIndexResin);

  // Absorption length - copied from borosilicate
  std::vector<G4double> absorptionLengthResin = {300, 420.*cm, 650, 420.*cm};
  G4MaterialPropertyVector* absorptionLengthResinMPV = nmToMPV(absorptionLengthResin);

  G4MaterialPropertiesTable* resinMPT = new G4MaterialPropertiesTable();
  resinMPT->AddProperty("RINDEX", refractiveIndexResinMPV);
  resinMPT->AddProperty("ABSLENGTH", absorptionLengthResinMPV);
  // resinMPT->DumpTable();
  siliconeResin->SetMaterialPropertiesTable(resinMPT);

  fMaterialsList.push_back(siliconeResin);

  // █▄▄ █ ▄▀█ █░░ █▄▀ ▄▀█ █░░ █
  // █▄█ █ █▀█ █▄▄ █░█ █▀█ █▄▄ █

  // Technically PMT Bialkali photocathode has stainless steel substrate
  // https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)00809-1
  // https://en.wikipedia.org/wiki/Photocathode
  G4Material* bialkaliCathode = new G4Material("bialkali", 3*g/cm3, 3, kStateSolid);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Sb"), 1);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Rb"), 1);
  bialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Cs"), 1);

  G4MaterialPropertiesTable* bialkaliMPT = new G4MaterialPropertiesTable();
  // Use same refraction index as the borosilicate glass (window) like here: https://core.ac.uk/download/pdf/276263522.pdf
  std::vector<G4double> refractiveIndexBialkali = {300, 1.49,
  																								 650, 1.49};
  G4MaterialPropertyVector* refractiveIndexBialkaliMPV = nmToMPV(refractiveIndexBialkali);

  bialkaliMPT->AddProperty("RINDEX", refractiveIndexBialkaliMPV);
  bialkaliCathode->SetMaterialPropertiesTable(bialkaliMPT);

  fMaterialsList.push_back(bialkaliCathode);

  // █▀▄▀█ █░█ █░░ ▀█▀ █ ▄▀█ █░░ █▄▀ ▄▀█ █░░ █
  // █░▀░█ █▄█ █▄▄ ░█░ █ █▀█ █▄▄ █░█ █▀█ █▄▄ █

  // multialkali, page 4 here SbNa2KCs
  // https://psec.uchicago.edu/library/photomultipliers/Photonis_PMT_basics.pdf
  G4Material* multialkaliCathode = new G4Material("multialkali", 3*g/cm3, 4, kStateSolid);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Sb"), 1);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Na"), 2);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("K"), 1);
  multialkaliCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Cs"), 1);

  G4MaterialPropertiesTable* multialkaliMPT = new G4MaterialPropertiesTable();
  // Use same refraction index as the borosilicate glass (window) like here: https://core.ac.uk/download/pdf/276263522.pdf
  // And R2257 with multialkali photocathode has borosilicate window: https://www.hamamatsu.com/resources/pdf/etd/R2257_TPMH1141E.pdf
  std::vector<G4double> refractiveIndexMultialkali = {300, 1.49,
  																								    650, 1.49};
  G4MaterialPropertyVector* refractiveIndexMultialkaliMPV = nmToMPV(refractiveIndexMultialkali);

  multialkaliMPT->AddProperty("RINDEX", refractiveIndexMultialkaliMPV);
  multialkaliCathode->SetMaterialPropertiesTable(multialkaliMPT);

  fMaterialsList.push_back(multialkaliCathode);

  // █▀ █ █░░ █ █▀▀ █▀█ █▄░█ ▄▄ █▀▀ █▀█ █▄█ █▀ ▀█▀ ▄▀█ █░░
  // ▄█ █ █▄▄ █ █▄▄ █▄█ █░▀█ ░░ █▄▄ █▀▄ ░█░ ▄█ ░█░ █▀█ █▄▄

  // Some info here: https://www.hamamatsu.com/resources/pdf/ssd/mppc_kapd9005e.pdf
  // Density taken from wikipedia: https://en.wikipedia.org/wiki/Silicon
  G4Material* siCathode = new G4Material("silicon-crystal", 2.32*g/cm3, 1, kStateSolid);
  siCathode->AddElement(G4NistManager::Instance()->FindOrBuildElement("Si"), 1);
  {
    G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
    // Use same refraction index as the silicone resin (S13360-...) like here: https://core.ac.uk/download/pdf/276263522.pdf
    std::vector<G4double> ri = {300, 1.41, 650, 1.41};
    G4MaterialPropertyVector* riMPV = nmToMPV(ri);

    mpt->AddProperty("RINDEX", riMPV);
    siCathode->SetMaterialPropertiesTable(mpt);
  }

  fMaterialsList.push_back(siCathode);

  // █▀█ █░█░█ █▀█ ▄▄ █▄▄ █▀█ █▀▀ █▀█ █▀█ █▀█ █▀▄ █ ▀█▀ █▀ █▄▀
  // █▀▀ ▀▄▀▄▀ █▄█ ░░ █▄█ █▄█ █▄█ █▄█ █▀▄ █▄█ █▄▀ █ ░█░ ▄█ █░█

  G4Material* PWO_B = getBaseMaterial("PWO-BOGO", BaseMaterialType::PWO); // new G4Material("PWO-BOGO", pwoDensity, PWO, kStateSolid);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // PbWO4 measured longitudinal transmittance (I/I_0) of a crystal of 21.3 cm long (R. Zhu, 1996)
    // Digitized from the undoped sample # 728
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    std::vector<G4double> transmittance = {360.2, 0, 374.3, 9.2, 387.3, 21.3, 402.4, 34.5, 427.6, 46.0, 454.0, 55.2, 483.4, 64.9, 519.0, 69.0, 579.2, 69.0, 636.3, 69.0, 702.7, 69.0, 755.7, 70.1, 797.6, 69.5};
    G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 21.3*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX", true);
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    // TODO: add emission p. 321
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    PWO_B->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_B);
  fMaterialsList.push_back(PWO_B);
  saveMaterial(PWO_B);

  // █▀█ █░█░█ █▀█ ▄▄ █▄█ ▄▀█ █▄░█ █▀▀
  // █▀▀ ▀▄▀▄▀ █▄█ ░░ ░█░ █▀█ █░▀█ █▄█

  // G4Material* PWO_Y = getBaseMaterial("PWO-SICCAS-YANG", BaseMaterialType::PWO);
  // {
  //   G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

  //   // Digitized from below article for the sample befor irradiation (2001) by P.Yang
  //   // https://sci-hub.do/10.1016/S0022-0248(01)02385-5
  //   std::vector<G4double> transmittance = {339.7, 0, 348.2, 1.4, 353.4, 9.9, 357.2, 18.9, 362.0, 31.1, 366.7, 40.7, 372.9, 47.1, 381.9, 52.9, 392.4, 57.0, 410.9, 62.0, 429.5, 64.8, 446.1, 66.3, 475.5, 67.9, 500.7, 69.3, 525.9, 70.1, 550.1, 70.9, 574.8, 71.2, 600.5, 71.6, 625.2, 71.9, 650.4, 72.1, 675.1, 72.3, 700.2, 72.4, 724.9, 72.4, 750.6, 72.6, 775.8, 72.3, 799.5, 73.1};
  // 	G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
  //   G4double transmittanceDistance = 22*cm;

  //   // Absorption length PbWO4
  //   G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX", true);
  //   G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
  //   mpt->AddProperty("ABSLENGTH", absLengthMPV);

  //   PWO_Y->SetMaterialPropertiesTable(mpt);
  // }
  // printMaterialProperties(PWO_Y);
  // fMaterialsList.push_back(PWO_Y);
  // saveMaterial(PWO_Y);

  // █▀█ █░█░█ █▀█   █▀▀ █▀█ █▄█ ▀█▀ █░█ █▀█
  // █▀▀ ▀▄▀▄▀ █▄█   █▄▄ █▀▄ ░█░ ░█░ █▄█ █▀▄

  G4Material* PWO_C = getBaseMaterial("PWO-CRYTUR", BaseMaterialType::PWO);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // Emission spectrum for PbWO4 (CRYTUR) provided by Jindřich Houžvička via email
    // Normalized digitzed emission spectrum:
    std::vector<G4double> emissionSpectrum = {337.71, 0,
                                              346.77, 0.000079,
                                              354.21, 0.000396266346779,
                                              368.44, 0.002139838272608,
                                              384.29, 0.004675942891996,
                                              395.61, 0.006419514817825,
                                              403.37, 0.007132794242028,
                                              409.20, 0.007608313858163,
                                              417.28, 0.007846073666231,
                                              422.78, 0.007925326935587,
                                              428.93, 0.007846073666231,
                                              439.93, 0.00729130078074,
                                              450.28, 0.006736527895249,
                                              465.48, 0.005547728854911,
                                              483.92, 0.004121170006505,
                                              499.77, 0.003090877504879,
                                              521.12, 0.002139838272608,
                                              553.14, 0.001188799040338,
                                              606.19, 0.000475519616135,
                                              656.65, 0.000158506538712,
                                              703.23, 0.000047,
                                              732.99, 0};
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);

    mpt->AddProperty("FASTCOMPONENT", fastComponent);
    mpt->AddProperty("SLOWCOMPONENT", slowComponent);

    // Transmittance CRYTUR, provided by V.Berdnikov
  	std::vector<G4double> transmittance = {330, 0, 340, 1.566694, 350, 13.223613, 360, 45.441407, 370, 62.071972, 380, 67.140230, 390, 68.931434, 400, 69.772116, 410, 70.262557, 420, 70.646469, 430, 71.216135, 440, 71.501950, 450, 71.723380, 460, 71.975302, 470, 72.019692, 480, 72.192253, 490, 72.614533, 500, 72.789630, 510, 72.788232, 520, 72.912663, 530, 73.042799, 540, 73.235979, 550, 73.354468, 560, 73.453758, 570, 73.639631, 580, 73.695232, 590, 73.819757, 600, 73.957622, 610, 73.997395, 620, 74.067210, 630, 74.073362, 640, 74.278860, 650, 74.253225, 660, 74.346432, 670, 74.327692, 680, 74.598802, 690, 74.607074, 700, 74.542008, 710, 74.542790, 720, 74.641923, 730, 74.787570, 740, 74.585494, 750, 74.804944, 760, 74.843619, 770, 74.728880, 780, 74.860927, 790, 74.742771, 800, 74.925695};
  	G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX", true);
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    PWO_C->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_C);
  generateEmissionMacro(PWO_C);
  fMaterialsList.push_back(PWO_C);
  saveMaterial(PWO_C);

  // █▀█ █░█░█ █▀█   █▀ █ █▀▀ █▀▀ ▄▀█ █▀
  // █▀▀ ▀▄▀▄▀ █▄█   ▄█ █ █▄▄ █▄▄ █▀█ ▄█

  G4Material* PWO_S = getBaseMaterial("PWO-SICCAS", BaseMaterialType::PWO);
  {
    G4MaterialPropertiesTable* mpt = getBaseMPT(BaseMaterialType::PWO);

    // Emission spectrum for PbWO4 (SICCAS) found in the literature
    // http://przyrbwn.icm.edu.pl/APP/PDF/131/a131z1p53.pdf
    // Digitzed emission spectrum:
    // std::vector<G4double> emissionSpectrum = {349.7, 0., 358.5, 8.7, 367.4, 18.2, 376.7, 28.4, 385.8, 37.8, 390.4, 42.3, 397.5, 47.7, 404.9, 52.3, 412.0, 56.3, 415.1, 58.2, 419.7, 59.3, 424.5, 59.9, 429.7, 59.9, 434.8, 59.1, 441.6, 55.9, 447.6, 52.4, 454.1, 48.6, 461.0, 44.8, 467.8, 40.3, 474.9, 35.4, 482.6, 30.1, 490.0, 24.9, 496.5, 20.5, 500.2, 17.9, 508.7, 13.6, 514.7, 11.1, 521.0, 8.8, 531.2, 5.9, 540.3, 3.4, 549.7, 1.5, 559.1, 0.};
    // Normalized digitzed emission spectrum:
    std::vector<G4double> emissionSpectrum = {349.7, 0, 358.5, 0.0013858556703, 367.4, 0.002899146344766, 376.7, 0.004523942647876, 385.8, 0.006021303946821, 390.4, 0.006738125845252, 397.5, 0.00759831212337, 404.9, 0.008331063397322, 412, 0.008968238418149, 415.1, 0.009270896553042, 419.7, 0.00944611968377, 424.5, 0.009541695936894, 429.7, 0.009541695936894, 434.8, 0.009414260932729, 441.6, 0.008904520916067, 447.6, 0.008346992772842, 454.1, 0.007741676503056, 461, 0.00713636023327, 467.8, 0.006419538334839, 474.9, 0.005638998934325, 482.6, 0.004794742031728, 490, 0.003966414504652, 496.5, 0.003265521981742, 500.2, 0.002851358218204, 508.7, 0.002166395070814, 514.7, 0.001768160682797, 521, 0.001401785045821, 531.2, 0.000939833155721, 540.3, 0.000541598767704, 549.7, 0.00023894063281, 559.1, 0};
    G4MaterialPropertyVector* fastComponent = nmToMPV(emissionSpectrum);
    G4MaterialPropertyVector* slowComponent = nmToMPV(emissionSpectrum);
    mpt->AddProperty("FASTCOMPONENT", fastComponent);
    mpt->AddProperty("SLOWCOMPONENT", slowComponent);

    // Transmittance SICCAS (S047), provided by V.Berdnikov
  	std::vector<G4double> transmittance = {340, 0., 350, 3.48074, 360, 29.3949, 370, 48.346, 380, 55.3979, 390, 58.6286, 400, 60.9593, 410, 62.6595, 420, 63.9743, 430, 64.9291, 440, 65.631, 450, 66.1062, 460, 66.7927, 470, 67.1896, 480, 67.3996, 490, 67.7139, 500, 68.053, 510, 68.3073, 520, 68.519, 530, 68.8111, 540, 68.9737, 550, 69.0832, 560, 69.4211, 570, 69.5605, 580, 69.6869, 590, 69.8266, 600, 69.9968, 610, 70.0129, 620, 70.1723, 630, 70.2061, 640, 70.3685, 650, 70.4813, 660, 70.4112, 670, 70.5207, 680, 70.6612, 690, 70.6313, 700, 70.6932, 710, 70.7846, 720, 70.7335, 730, 70.8962, 740, 70.934, 750, 70.9511, 760, 71.0478, 770, 71.0046, 780, 71.0511, 790, 71.0082, 800, 70.973};
  	G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    G4double transmittanceDistance = 20*cm;

    // Absorption length PbWO4
    G4MaterialPropertyVector* refractiveIndexMPV = mpt->GetProperty("RINDEX", true);
    G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);
    mpt->AddProperty("ABSLENGTH", absLengthMPV);

    PWO_S->SetMaterialPropertiesTable(mpt);
  }
  printMaterialProperties(PWO_S);
  fMaterialsList.push_back(PWO_S);
  saveMaterial(PWO_S);
  generateEmissionMacro(PWO_S);
}

Materials::~Materials() {
  // TODO Auto-generated destructor stub
}

G4Material* Materials::getMaterial(const char* materialId){
  for (int i=0; i<(int)fMaterialsList.size(); i++){
    if (fMaterialsList[i]->GetName() == materialId){
      return fMaterialsList[i];
    }
  }
  G4cout << "ERROR: Materials::getMaterial material " << materialId << " not found." << G4endl;
  return NULL;
}

G4MaterialPropertyVector* Materials::calcAbsorptionLength(G4MaterialPropertiesTable* mpt, G4MaterialPropertyVector* refractiveIndex, G4MaterialPropertyVector* measuredTransmittance, G4double sampleLength, G4int nPoints){
  // Reflectivity. To be filled from down below
	G4MaterialPropertyVector* reflectivityMPV = new G4MaterialPropertyVector();

  // Ideal Transmittance. To be filled from down below
	G4MaterialPropertyVector* idealTransmittanceMPV = new G4MaterialPropertyVector();

  // Theoretical Transmittance. To be filled from down below
  // std::vector<G4double> realTransmittance = {};

  // Attenuation length
	G4MaterialPropertyVector* attenuationLengthMPV = new G4MaterialPropertyVector();

  // Define energy limits for the output absorption length MPV as the widest between provided RI and T MPVs'
  // G4double eMin = std::min(refractiveIndex->GetMinLowEdgeEnergy(), measuredTransmittance->GetMinLowEdgeEnergy());
  // G4double eMax = std::max(refractiveIndex->GetMaxLowEdgeEnergy(), measuredTransmittance->GetMaxLowEdgeEnergy());

  G4double eMin = std::max(refractiveIndex->GetMinLowEdgeEnergy(), measuredTransmittance->GetMinLowEdgeEnergy());
  G4double eMax = measuredTransmittance->GetMaxLowEdgeEnergy();

  for (G4int i=0; i<nPoints; i++){
  	// Workaround the rounding of the last point... ABSLENGTH = -nan
  	G4double e;
  	G4double eStep = (eMax-eMin)/(nPoints-1);
  	if (i == 0) e = eMin;
  	if (i > 0 && i < nPoints - 1) e = eMin + i*eStep;
  	if (i == nPoints - 1) e = eMax;

    // All formulas below taken from:
  	// https://sci-hub.do/https://doi.org/10.1016/0168-9002(93)91185-P
  	G4double RI = refractiveIndex->Value(e);

    // Reflectivity - formula (3)
    G4double refractiveIndexAir = 1;
    G4double R = std::pow((RI - refractiveIndexAir)/(RI + refractiveIndexAir), 2.);
    reflectivityMPV->InsertValues(e, R);

    // Ideal transmittance with infinite light attenuation length and two parallel end surfaces
    G4double Ts = (1 - R)/(1 + R);
    idealTransmittanceMPV->InsertValues(e, Ts);

    // Real transmittance can also be estimated but we're using the measured value
    // G4double tReal = crystalLength*pow(1-r,2)/(1-pow(l*r,2));

    // Absorption (light attenuation length)
    G4double T = measuredTransmittance->Value(e)/100.;

    G4double lambda;

    // It can happen that measured transmittance is higher than tha ideal transmittance...
    // Make sure to provide the RINDEX in the whole region.

    if (T>0){
    	G4double a = T*(1-Ts)*(1-Ts);
    	G4double b = std::sqrt(4*Ts*Ts*Ts*Ts + T*T*(1-Ts*Ts)*(1-Ts*Ts))-2*Ts*Ts; // @suppress("Ambiguous problem")
    	G4double c = a/b;
    	G4double d = std::log(c); // @suppress("Ambiguous problem")
    	lambda = sampleLength/d;
    }
    else {
    	lambda = 0;
    }
    attenuationLengthMPV->InsertValues(e, lambda);
  }

  // Add custom values to the material properties table (for debugging output)
  mpt->AddProperty("MY_TRANSMITTANCE", measuredTransmittance);
  mpt->AddProperty("MY_REFLECTIVITY", reflectivityMPV);
  mpt->AddProperty("MY_IDEAL_TRANSM", idealTransmittanceMPV);

  // Return MPV
  attenuationLengthMPV->SetSpline(true);
  return attenuationLengthMPV;
}

//void Materials::printLine(const char* heading, std::vector<G4double> values, G4double unit){
//  // Print photon wavelength
//  std::cout << std::endl << std::left << std::setw(TAB_COLUMN_1) << heading;
//  for (G4int i = 0; i < (G4int)values.size(); i++){
//    G4double value = (unit == 0.) ? values[i] : values[i]/unit;
//    std::cout << std::left << std::setw(TAB_COLUMN) << value;
//  }
//}
//
//
//void Materials::printHeader(){
//  printLine("Photon wavelength, nm", fOpticalPhotonWavelength);
//  printLine("Photon energy, eV", fOpticalPhotonEnergy, eV);
//}

typedef std::map< G4int, G4MaterialPropertyVector*,
                  std::less<G4int> >::const_iterator MPiterator;

void Materials::printMaterialProperties(G4Material* material){
  std::cout << "\nMaterial name: " << material->GetName() << std::endl;
  G4MaterialPropertiesTable* mpt = material->GetMaterialPropertiesTable();
  if (!mpt) return;

  const std::map<G4int, G4MaterialPropertyVector*, std::less<G4int> >* pMapNew = mpt->GetPropertyMap();
  std::vector<G4double> fOpticalPhotonWavelength = {360, 400., 440., 480., 520., 560., 600., 640., 680., 720., 760};

  // Print photon wavelengths
  std::cout << std::left << std::setw(TAB_COLUMN_1) << "PHOTON_WAVELEGTH, nm";
  for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
    std::cout << std::left << std::setw(TAB_COLUMN) << fOpticalPhotonWavelength[i];
  }

  std::cout << std::endl;

  // Print photon energy
  std::cout << std::left << std::setw(TAB_COLUMN_1) << "PHOTON_ENERGY, eV";
  for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
    std::cout << std::left << std::setw(TAB_COLUMN) << wavelengthNmToEnergy(fOpticalPhotonWavelength[i])/eV;
  }
  std::cout << std::endl;

  // Print material properties
  std::vector<G4String> propertyNames = mpt->GetMaterialPropertyNames();

  for(auto it = pMapNew->begin(); it!=pMapNew->end(); ++it){
  	// Print property name
    std::cout << std::left << std::setw(TAB_COLUMN_1) << propertyNames[it->first];

    for (G4int i = 0; i < (G4int)fOpticalPhotonWavelength.size(); i++){
      G4bool b = true;
      G4double value = it->second->GetValue(wavelengthNmToEnergy(fOpticalPhotonWavelength[i]), b);
      std::cout << std::left << std::setw(TAB_COLUMN) << value;
    }

    std::cout << std::endl;
  }

  // Print material constant properties
  const std::map<G4int, G4double, std::less<G4int> >* pConstMapNew = mpt->GetConstPropertyMap();
  std::vector<G4String> const constPropertyNames = mpt->GetMaterialConstPropertyNames();

  for(auto it = pConstMapNew->begin(); it!=pConstMapNew->end(); ++it){
  	// Print property name
    std::cout << std::left << std::setw(TAB_COLUMN_1) << constPropertyNames[it->first] << it->second << std::endl;
  }
}

void Materials::saveMaterial(G4Material* material){
  // Create output directory
  gSystem->MakeDirectory("./output/");
  gSystem->MakeDirectory("./output/materials");

  TString fileName = "./output/materials/" + material->GetName() + ".root";
	TFile* file = new TFile(fileName, "RECREATE");
  if (!file) {
    G4cout << "Materials::saveMaterial: cannot create output file \"" << fileName.Data() << "\"" << G4endl;
    return;
  }
  G4cout << "Materials::saveMaterial: created output file \"" << fileName.Data() << "\"" << G4endl;

	G4MaterialPropertiesTable* mpt = material->GetMaterialPropertiesTable();

  // Write Material Vector properties (as TGraph-s)
	// Deprecated: mpt->GetPropertiesMap()
  const std::map<G4int, G4MaterialPropertyVector*, std::less<G4int> >* pMap = mpt->GetPropertyMap();
  std::vector<G4String> propertyNames = mpt->GetMaterialPropertyNames();

  for(auto it = pMap->begin(); it!=pMap->end(); ++it){
  	// Print property name
  	G4String propertyName = propertyNames[it->first];
    std::cout << std::left << std::setw(TAB_COLUMN_1) << propertyName;

    TGraph* graph = drawMPV(it->second);
    G4String graphTitle = material->GetName() + " " + propertyName + ";Wavelength, nm;" + propertyName;
    graph->SetTitle(graphTitle);
    // graph->SetDrawOption("AL*");
    graph->SetMarkerStyle(kStar);
    graph->Write(propertyName.c_str());
  }

  // Write Material constant properties (as TVectorD-s)
  // Deprecated: mpt->GetPropertiesCMap();
  const std::map<G4int, G4double, std::less<G4int> >* pConstMap = mpt->GetConstPropertyMap();
  std::vector<G4String> constPropertyNames = mpt->GetMaterialConstPropertyNames();

  for(auto it = pConstMap->begin(); it!=pConstMap->end(); ++it){
    // Print property name
    G4String propertyName = constPropertyNames[it->first];
    std::cout << std::left << std::setw(TAB_COLUMN_1) << propertyName;

    // Write a simple variable into ROOT file:
    // https://root-forum.cern.ch/t/writing-simple-variable-in-root-files/11094
    TVectorD* vectorD = new TVectorD(1);
    vectorD[0] = it->second;
    vectorD->Write(propertyName.c_str());
  }

  file->Write();
  file->Close();       // and closing the tree (and the file)
}

void Materials::printMaterialProperties(const char* materialId){
  G4Material* material = getMaterial(materialId);
  if (material == NULL) return;
  printMaterialProperties(material);
}

Materials* Materials::getInstance() {
  static Materials materials;
  if (fgInstance == nullptr)
  {
    fgInstance = &materials;
  }
  return fgInstance;
}

G4MaterialPropertyVector* Materials::evToMPV(std::vector<G4double> digitizedArray){
  assert(digitizedArray.size()%2 == 0);
  G4MaterialPropertyVector* mpv = new G4MaterialPropertyVector();
  for (G4int i = 0; i < (G4int)digitizedArray.size(); i+=2){
   G4double energy = digitizedArray[i]*eV; // E (eV) = 1239.8 / l (nm)
   G4double value = digitizedArray[i+1];
   mpv->InsertValues(energy, value);
  }
  mpv->SetSpline(true);
  return mpv;
}

G4MaterialPropertyVector* Materials::nmToMPV(std::vector<G4double> digitizedArrayNm){
  assert(digitizedArrayNm.size()%2 == 0);
  G4MaterialPropertyVector* mpv = new G4MaterialPropertyVector();
  for (G4int i = 0; i < (G4int)digitizedArrayNm.size(); i+=2){
   G4double hc = 1239.84193;
   G4double energy = hc/digitizedArrayNm[i]*eV; // E (eV) = 1239.8 / l (nm)
   G4double value = digitizedArrayNm[i+1];
   mpv->InsertValues(energy, value);
  }
  // mpv->SetSpline(true);
  return mpv;
}

// PS: when having a static std::vector member
//std::vector<G4Material*> Materials::fMaterialsList = {};

G4double Materials::energyToWavelangthNm(G4double energy) {
  G4double hc = 1239.84193;
	return hc*eV/energy;
}

G4double Materials::wavelengthNmToEnergy(G4double wavelength){
  G4double hc = 1239.84193;
  return hc/wavelength*eV; // E (eV) = 1239.8 / l (nm)
}

TGraph* Materials::drawMPV(G4MaterialPropertyVector *mpv) {
//	G4double eMin = mpv->GetMinLowEdgeEnergy();
//	G4double eMax = mpv->GetMaxLowEdgeEnergy();
	TGraph* graph = new TGraph();
//	G4int i = 0;
	for (G4int i = 0; i < (G4int)mpv->GetVectorLength(); i++){
		G4double e = mpv->GetLowEdgeEnergy(i);
		G4bool b = false;
		G4double wavelength = energyToWavelangthNm(e);
		graph->SetPoint(i, wavelength, mpv->GetValue(e, b));
	}
	return graph;
}

G4Material* Materials::getBaseMaterial(const char* newName, BaseMaterialType bmt, G4double overrideDensity) {
  // Instantiate elements database
  Elements* elements = Elements::getInstance();

  // Create
	if (bmt == BaseMaterialType::PWO){
	  G4double pwoDensity = 8.28*g/cm3;
	  G4Material* pwo = new G4Material(newName, overrideDensity==0?pwoDensity:overrideDensity, 3, kStateSolid);
	  pwo->AddElement(elements->getElement("Pb"), 1);
	  pwo->AddElement(elements->getElement("W"), 1);
	  pwo->AddElement(elements->getElement("O"), 4);
	  return pwo;
	}
	else if (bmt == BaseMaterialType::SciGlass){
	}
	else if (bmt == BaseMaterialType::CSGlass){
	}
	return NULL;
}

G4MaterialPropertiesTable* Materials::getBaseMPT(BaseMaterialType bmt) {
  G4MaterialPropertiesTable* mpt = new G4MaterialPropertiesTable();
	if (bmt == BaseMaterialType::PWO){
    // Some of the GEANT4 optical parameters are outlined on pp.55 of
    // http://epubs.surrey.ac.uk/811039/1/Sion%20Richards-Thesis-Final-Version.pdf

    // PbWO4 ordinary refractive index taken from page 5 of
    // https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)01016-9
    // point 330, 2.8 can be added artificially
    // point 900, 2.21 can be added artificially
    // Researchers refer to this RI data as well: http://geb.uni-giessen.de/geb/volltexte/2013/10382/pdf/EissnerTobias_2013_11_18.pdf
    std::vector<G4double> refractiveIndex = {375, 2.452, 400, 2.393, 425, 2.353, 450, 2.323, 475, 2.301, 500, 2.284, 525, 2.270, 550, 2.259, 575, 2.250, 600, 2.242, 625, 2.236, 650, 2.230, 675, 2.225, 700, 2.222};
    G4MaterialPropertyVector* refractiveIndexMPV = nmToMPV(refractiveIndex);
    mpt->AddProperty("RINDEX", refractiveIndexMPV);

    // Older values used for simulation:
    // std::vector<G4double> wavelength         = { 400., 440., 480., 520., 560., 600.,  640., 680.}
    // std::vector<G4double> transmittancePbWO4 = { 0.33, 0.48, 0.62, 0.67, 0.68, 0.689, 0.69, 0.69};

    // PbWO4 measured longitudinal transmittance (I/I_0) of a crystal of 21.3 cm long (R. Zhu, 1996)
    // Digitized from the undoped sample # 728
    // https://sci-hub.do/10.1016/0168-9002(96)00286-0
    // std::vector<G4double> transmittance = {360.2, 0, 374.3, 9.2, 387.3, 21.3, 402.4, 34.5, 427.6, 46.0, 454.0, 55.2, 483.4, 64.9, 519.0, 69.0, 579.2, 69.0, 636.3, 69.0, 702.7, 69.0, 755.7, 70.1, 797.6, 69.5};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double pbwo4BlockLength = 21.3*cm;

    // Digitized from below article for the sample befor irradiation (2001) by P.Yang
    // https://sci-hub.do/10.1016/S0022-0248(01)02385-5
    // std::vector<G4double> transmittance = {339.7, 0.0, 348.2, 1.4, 353.4, 9.9, 357.2, 18.9, 362.0, 31.1, 366.7, 40.7, 372.9, 47.1, 381.9, 52.9, 392.4, 57.0, 410.9, 62.0, 429.5, 64.8, 446.1, 66.3, 475.5, 67.9, 500.7, 69.3, 525.9, 70.1, 550.1, 70.9, 574.8, 71.2, 600.5, 71.6, 625.2, 71.9, 650.4, 72.1, 675.1, 72.3, 700.2, 72.4, 724.9, 72.4, 750.6, 72.6, 775.8, 72.3, 799.5, 73.1};
    // G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 22*cm;

    // Transmittance CRYTUR, provided by V.Berdnikov
  	// std::vector<G4double> transmittance = {330, 0, 340, 1.566694, 350, 13.223613, 360, 45.441407, 370, 62.071972, 380, 67.140230, 390, 68.931434, 400, 69.772116, 410, 70.262557, 420, 70.646469, 430, 71.216135, 440, 71.501950, 450, 71.723380, 460, 71.975302, 470, 72.019692, 480, 72.192253, 490, 72.614533, 500, 72.789630, 510, 72.788232, 520, 72.912663, 530, 73.042799, 540, 73.235979, 550, 73.354468, 560, 73.453758, 570, 73.639631, 580, 73.695232, 590, 73.819757, 600, 73.957622, 610, 73.997395, 620, 74.067210, 630, 74.073362, 640, 74.278860, 650, 74.253225, 660, 74.346432, 670, 74.327692, 680, 74.598802, 690, 74.607074, 700, 74.542008, 710, 74.542790, 720, 74.641923, 730, 74.787570, 740, 74.585494, 750, 74.804944, 760, 74.843619, 770, 74.728880, 780, 74.860927, 790, 74.742771, 800, 74.925695};
  	// G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 20*cm;

    // Transmittance SICCAS (S047), provided by V.Berdnikov
  	// std::vector<G4double> transmittance = {340, 0., 350, 3.48074, 360, 29.3949, 370, 48.346, 380, 55.3979, 390, 58.6286, 400, 60.9593, 410, 62.6595, 420, 63.9743, 430, 64.9291, 440, 65.631, 450, 66.1062, 460, 66.7927, 470, 67.1896, 480, 67.3996, 490, 67.7139, 500, 68.053, 510, 68.3073, 520, 68.519, 530, 68.8111, 540, 68.9737, 550, 69.0832, 560, 69.4211, 570, 69.5605, 580, 69.6869, 590, 69.8266, 600, 69.9968, 610, 70.0129, 620, 70.1723, 630, 70.2061, 640, 70.3685, 650, 70.4813, 660, 70.4112, 670, 70.5207, 680, 70.6612, 690, 70.6313, 700, 70.6932, 710, 70.7846, 720, 70.7335, 730, 70.8962, 740, 70.934, 750, 70.9511, 760, 71.0478, 770, 71.0046, 780, 71.0511, 790, 71.0082, 800, 70.973};
  	// G4MaterialPropertyVector* transmittanceMPV = nmToMPV(transmittance);
    // G4double transmittanceDistance = 20*cm;

    // G4MaterialPropertyVector* absLengthMPV = calcAbsorptionLength(mpt, refractiveIndexMPV, transmittanceMPV, transmittanceDistance);

    // Absorption length PbWO4 - calculated https://sci-hub.do/https://doi.org/10.1016/0168-9002(93)91185-P
    // TODO: compare with https://sci-hub.do/https://doi.org/10.1016/S0168-9002(96)01016-9
    // TODO: compare with https://sci-hub.do/https://link.springer.com/article/10.1557/PROC-348-475
    // mpt->AddProperty("ABSLENGTH", absLengthMPV);

    // Energy spectrum for the fast scintillation component PbWO4 (arbitrary units)
    // PbWO4 emission spectrum (Berd sent paper): https://sci-hub.do/10.1088/1742-6596/293/1/012004
    // std::vector<G4double> digitizedEmissionSpectrum = {411.29848229342326, 10, 420.4047217537943, 14.606741573033702, 425.9696458684655, 21.68539325842697, 433.55817875210795, 30, 439.62900505902195, 37.64044943820225, 447.72344013490726, 44.49438202247191, 457.3355817875211, 50, 466.4418212478921, 51.79775280898876, 478.58347386172005, 49.7752808988764, 490.7251264755481, 42.92134831460674, 499.8313659359191, 35.1685393258427, 508.9376053962901, 27.752808988764045, 518.043844856661, 20.561797752809, 527.6559865092748, 13.932584269662925, 544.8566610455313, 7.752808988764045, 564.080944350759, 3.2584269662921344, 581.2816188870152, 2.0224719101123583};

    // Scintillation light yield - number of photons per unit energy deposition ~ 300 for SICCAS PbWO4
    // https://sci-hub.do/10.1016/j.phpro.2015.05.033 - says 300/MeV
    // However we used 100/MeV to ensure correct PE output
    // Siccas Light Yield is 120/MeV? check here: https://sci-hub.ru/10.1109/23.603694
	}
	else if (bmt == BaseMaterialType::SciGlass){
	}
	else if (bmt == BaseMaterialType::CSGlass){

  }
  else if (bmt == BaseMaterialType::Dummy){
  }
  mpt->AddConstProperty("SCINTILLATIONYIELD", 300./MeV);

  // Fluctuation of mean number of optical photons produces for the step
  mpt->AddConstProperty("RESOLUTIONSCALE", 1.0);

  mpt->AddConstProperty("FASTTIMECONSTANT", 13*ns);
  mpt->AddConstProperty("SLOWTIMECONSTANT", 412*ns);
  mpt->AddConstProperty("YIELDRATIO", 0.9);  

  // Scintillation rise time
  mpt->AddConstProperty("FASTSCINTILLATIONRISETIME", 10*ps);
  mpt->AddConstProperty("SLOWSCINTILLATIONRISETIME", 50*ps);
  return mpt;
}

// Automatically generate macros for emission
void Materials::generateEmissionMacro(G4Material* material){
  G4MaterialPropertiesTable* mpt = material->GetMaterialPropertiesTable();
  G4MaterialPropertyVector* mpv = mpt->GetProperty("FASTCOMPONENT");

  G4String emissionFilename = "macros/gps-op-emission-" + material->GetName() + ".mac";

  std::ofstream myfile;
  myfile.open(emissionFilename.c_str());
  myfile << "# Auto-generated: OP Emission for " << material->GetName() << std::endl;
  myfile << "# http://hurel.hanyang.ac.kr/Geant4/Geant4_GPS/reat.space.qinetiq.com/gps/examples/examples.html" << std::endl;
  myfile << std::endl;
  myfile << "/gps/particle opticalphoton" << std::endl;
  myfile << "/gps/pos/type Point" << std::endl;
  myfile << "/gps/ang/type iso" << std::endl;
  myfile << std::endl;
  myfile << "# In example #18" << std::endl;

  // These line for user-defined histogram
  // myfile << "/gps/ene/type User" << std::endl;
  // myfile << "/gps/hist/type energy" << std::endl;

  // These lines for arbitrary point-wise energy function with linear interpolation
  myfile << "/gps/ene/type Arb" << std::endl;
  myfile << "/gps/hist/type arb" << std::endl;

  myfile << std::endl;
  for (int i = 0; i<(int)mpv->GetVectorLength(); i++){
    G4double e = mpv->Energy(i);
    G4bool b = true;
    G4double value = mpv->GetValue(e, b);
    myfile << "/gps/hist/point " << e << " " << value << std::endl;
  }
  myfile << std::endl;
  myfile << "/gps/hist/inter Lin" << std::endl;

  myfile.close();
}
